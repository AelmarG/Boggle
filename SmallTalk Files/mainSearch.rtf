{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh17440\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 searchIn: board with: trie atRow: m atColumn: n through: path result: wordList\
\
	| letter nextTrieNode updatedPath |\
\
	"checks if the coordinates are outside of the board"\
	(m between: 1 and: board size) ifFalse:[^nil].\
	(n between: 1 and: board size) ifFalse:[^nil].\
	\
	"gets the letter at the coordinate"\
	letter:= (board at: m) at: n.\
\
	"checks if the current letter is in the path (you can't use the same letter position >1)"\
	(path includes: m @ n) ifTrue:[^nil].\
	\
	"checks if the trie doesn't contain the letter (meaning the word can't be made)"\
	(trie includesKey: letter) ifFalse: [ ^nil ].\
	\
	"updates the path by copying the current path with the next point"\
	updatedPath := path copyWith: m @ n.\
\
\
	"makes the next node which will be moved to in the recursive call"\
	nextTrieNode:=trie at: letter. \
\
	"if the next node is the end, it will add the word into the final dictionary with the word as the key and the val being the complete path"\
	(nextTrieNode includesKey: #end) ifTrue: [\
        wordList at: (nextTrieNode at: #end) put: updatedPath.\
	].\
	\
	"goes through all surrounding values of the current letter to check all possible paths"\
	m-1 to: m+1 do: [ :y |\
		n-1 to: n+1 do: [ :x| \
			self searchIn: board with: nextTrieNode atRow: y atColumn: x through: updatedPath result: wordList\
			].\
		].\
	\
	}